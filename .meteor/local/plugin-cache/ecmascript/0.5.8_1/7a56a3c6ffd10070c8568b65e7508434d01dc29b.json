{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./main.html","imported":[],"specifiers":[]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/main.js","filenameRelative":"/client/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/main.js.map","sourceFileName":"/client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"module.import('./main.html');var Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});var Template;module.import('meteor/templating',{\"Template\":function(v){Template=v}});var ReactiveVar;module.import('meteor/reactive-var',{\"ReactiveVar\":function(v){ReactiveVar=v}});\n\n\n\n\nvar MAP_ZOOM = 15;\nMarkers = new Mongo.Collection('markers');\n\nMeteor.startup(function () {\n  GoogleMaps.load();\n});\n\nMeteor.startup(function () {\n  GoogleMaps.load();\n});\n\nTemplate.map.helpers({\n  mapOptions: function () {\n    function mapOptions() {\n      if (GoogleMaps.loaded()) {\n        return {\n          center: new google.maps.LatLng(50.2880701, 18.6778916),\n          zoom: 15\n        };\n      }\n    }\n\n    return mapOptions;\n  }()\n});\nTemplate.map.onCreated(function () {\n  GoogleMaps.ready('map', function (map) {\n    google.maps.event.addListener(map.instance, 'click', function (event) {\n      Markers.insert({ lat: event.latLng.lat(), lng: event.latLng.lng() });\n    });\n\n    // The code shown below goes here\n  });\n});\nvar markers = {};\n\nMarkers.find().observe({\n  added: function () {\n    function added(document) {\n      // Create a marker for this document\n      var marker = new google.maps.Marker({\n        draggable: true,\n        animation: google.maps.Animation.DROP,\n        position: new google.maps.LatLng(document.lat, document.lng),\n        map: map.instance,\n        // We store the document _id on the marker in order\n        // to update the document within the 'dragend' event below.\n        id: document._id\n      });\n\n      // This listener lets us drag markers on the map and update their corresponding document.\n      google.maps.event.addListener(marker, 'dragend', function (event) {\n        Markers.update(marker.id, { $set: { lat: event.latLng.lat(), lng: event.latLng.lng() } });\n      });\n\n      // Store this marker instance within the markers object.\n      markers[document._id] = marker;\n    }\n\n    return added;\n  }(),\n  changed: function () {\n    function changed(newDocument, oldDocument) {\n      markers[newDocument._id].setPosition({ lat: newDocument.lat, lng: newDocument.lng });\n    }\n\n    return changed;\n  }(),\n  removed: function () {\n    function removed(oldDocument) {\n      // Remove the marker from the map\n      markers[oldDocument._id].setMap(null);\n\n      // Clear the event listener\n      google.maps.event.clearInstanceListeners(markers[oldDocument._id]);\n\n      // Remove the reference to this marker instance\n      delete markers[oldDocument._id];\n    }\n\n    return removed;\n  }()\n});\nAccounts.ui.config({\n\n  passwordSignupFields: 'USERNAME_ONLY'\n\n});","ast":null,"map":{"version":3,"sources":["/client/main.js"],"names":[],"mappings":"AAAA,OAAO,aAAP;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,WAAT,QAA4B,qBAA5B;;AAEA,IAAI,WAAW,EAAf;AACA,UAAU,IAAI,MAAM,UAAV,CAAqB,SAArB,CAAV;;AAEA,OAAO,OAAP,CAAe,YAAW;AACxB,aAAW,IAAX;AACD,CAFD;;AAIA,OAAO,OAAP,CAAe,YAAW;AACxB,aAAW,IAAX;AACD,CAFD;;AAIA,SAAS,GAAT,CAAa,OAAb,CAAqB;AACnB;AAAY,0BAAW;AACrB,UAAI,WAAW,MAAX,EAAJ,EAAyB;AACvB,eAAO;AACL,kBAAQ,IAAI,OAAO,IAAP,CAAY,MAAhB,CAAuB,UAAvB,EAAmC,UAAnC,CADH;AAEL,gBAAM;AAFD,SAAP;AAID;AACF;;AAPD;AAAA;AADmB,CAArB;AAUA,SAAS,GAAT,CAAa,SAAb,CAAuB,YAAW;AAChC,aAAW,KAAX,CAAiB,KAAjB,EAAwB,UAAS,GAAT,EAAc;AACpC,WAAO,IAAP,CAAY,KAAZ,CAAkB,WAAlB,CAA8B,IAAI,QAAlC,EAA4C,OAA5C,EAAqD,UAAS,KAAT,EAAgB;AACnE,cAAQ,MAAR,CAAe,EAAE,KAAK,MAAM,MAAN,CAAa,GAAb,EAAP,EAA2B,KAAK,MAAM,MAAN,CAAa,GAAb,EAAhC,EAAf;AACD,KAFD;;;AAMD,GAPD;AAQD,CATD;AAUA,IAAI,UAAU,EAAd;;AAEA,QAAQ,IAAR,GAAe,OAAf,CAAuB;AACrB;AAAO,mBAAS,QAAT,EAAmB;;AAExB,UAAI,SAAS,IAAI,OAAO,IAAP,CAAY,MAAhB,CAAuB;AAClC,mBAAW,IADuB;AAElC,mBAAW,OAAO,IAAP,CAAY,SAAZ,CAAsB,IAFC;AAGlC,kBAAU,IAAI,OAAO,IAAP,CAAY,MAAhB,CAAuB,SAAS,GAAhC,EAAqC,SAAS,GAA9C,CAHwB;AAIlC,aAAK,IAAI,QAJyB;;;AAOlC,YAAI,SAAS;AAPqB,OAAvB,CAAb;;;AAWA,aAAO,IAAP,CAAY,KAAZ,CAAkB,WAAlB,CAA8B,MAA9B,EAAsC,SAAtC,EAAiD,UAAS,KAAT,EAAgB;AAC/D,gBAAQ,MAAR,CAAe,OAAO,EAAtB,EAA0B,EAAE,MAAM,EAAE,KAAK,MAAM,MAAN,CAAa,GAAb,EAAP,EAA2B,KAAK,MAAM,MAAN,CAAa,GAAb,EAAhC,EAAR,EAA1B;AACD,OAFD;;;AAKA,cAAQ,SAAS,GAAjB,IAAwB,MAAxB;AACD;;AAnBD;AAAA,KADqB;AAqBrB;AAAS,qBAAS,WAAT,EAAsB,WAAtB,EAAmC;AAC1C,cAAQ,YAAY,GAApB,EAAyB,WAAzB,CAAqC,EAAE,KAAK,YAAY,GAAnB,EAAwB,KAAK,YAAY,GAAzC,EAArC;AACD;;AAFD;AAAA,KArBqB;AAwBrB;AAAS,qBAAS,WAAT,EAAsB;;AAE7B,cAAQ,YAAY,GAApB,EAAyB,MAAzB,CAAgC,IAAhC;;;AAGA,aAAO,IAAP,CAAY,KAAZ,CAAkB,sBAAlB,CACE,QAAQ,YAAY,GAApB,CADF;;;AAIA,aAAO,QAAQ,YAAY,GAApB,CAAP;AACD;;AAVD;AAAA;AAxBqB,CAAvB;AAoCA,SAAS,EAAT,CAAY,MAAZ,CAAmB;;AAEjB,wBAAsB;;AAFL,CAAnB","file":"/client/main.js.map","sourcesContent":["import './main.html';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nvar MAP_ZOOM = 15;\nMarkers = new Mongo.Collection('markers');\n\nMeteor.startup(function() {\n  GoogleMaps.load();\n});\n\nMeteor.startup(function() {\n  GoogleMaps.load();\n});\n\nTemplate.map.helpers({\n  mapOptions: function() {\n    if (GoogleMaps.loaded()) {\n      return {\n        center: new google.maps.LatLng(50.2880701, 18.6778916),\n        zoom: 15\n      };\n    }\n  }\n});\nTemplate.map.onCreated(function() {\n  GoogleMaps.ready('map', function(map) {\n    google.maps.event.addListener(map.instance, 'click', function(event) {\n      Markers.insert({ lat: event.latLng.lat(), lng: event.latLng.lng() });\n    });\n\n    // The code shown below goes here\n\n  });\n});\nvar markers = {};\n\nMarkers.find().observe({\n  added: function(document) {\n    // Create a marker for this document\n    var marker = new google.maps.Marker({\n      draggable: true,\n      animation: google.maps.Animation.DROP,\n      position: new google.maps.LatLng(document.lat, document.lng),\n      map: map.instance,\n      // We store the document _id on the marker in order\n      // to update the document within the 'dragend' event below.\n      id: document._id\n    });\n\n    // This listener lets us drag markers on the map and update their corresponding document.\n    google.maps.event.addListener(marker, 'dragend', function(event) {\n      Markers.update(marker.id, { $set: { lat: event.latLng.lat(), lng: event.latLng.lng() }});\n    });\n\n    // Store this marker instance within the markers object.\n    markers[document._id] = marker;\n  },\n  changed: function(newDocument, oldDocument) {\n    markers[newDocument._id].setPosition({ lat: newDocument.lat, lng: newDocument.lng });\n  },\n  removed: function(oldDocument) {\n    // Remove the marker from the map\n    markers[oldDocument._id].setMap(null);\n\n    // Clear the event listener\n    google.maps.event.clearInstanceListeners(\n      markers[oldDocument._id]);\n\n    // Remove the reference to this marker instance\n    delete markers[oldDocument._id];\n  }\n});\nAccounts.ui.config({\n\n  passwordSignupFields: 'USERNAME_ONLY',\n\n});\n"]},"hash":"7a56a3c6ffd10070c8568b65e7508434d01dc29b"}
